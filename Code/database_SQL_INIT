-- Create tables
CREATE TABLE Contact_Info (
    contact_info_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);

CREATE TABLE Teacher (
    teacher_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subject VARCHAR2(50) NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    contact_info_ID INT NOT NULL,
    CONSTRAINT fk_contact_info FOREIGN KEY (contact_info_ID)
        REFERENCES Contact_Info(contact_info_ID)
);

CREATE TABLE Class (
    class_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(50) NOT NULL,
    grade VARCHAR2(50) NOT NULL,
    from_day VARCHAR2(50) NOT NULL,
    to_day VARCHAR2(50) NOT NULL,
    from_hour VARCHAR2(5) NOT NULL,
    to_hour VARCHAR2(5) NOT NULL,
    CONSTRAINT check_from_hour CHECK (REGEXP_LIKE(from_hour, '^(2[0-3]|[01][0-9]):[0-5][0-9]$')),
    CONSTRAINT check_to_hour CHECK (REGEXP_LIKE(to_hour, '^(2[0-3]|[01][0-9]):[0-5][0-9]$'))
);

CREATE TABLE Coordination (
    enrollment_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    teacher_ID INT NOT NULL,
    class_ID INT NOT NULL UNIQUE,
    CONSTRAINT fk_teacher FOREIGN KEY (teacher_ID)
        REFERENCES Teacher(teacher_ID),
    CONSTRAINT fk_class FOREIGN KEY (class_ID)
        REFERENCES Class(class_ID)
);

CREATE TABLE Email (
    email VARCHAR2(100) NOT NULL,
    contact_info_ID INT NOT NULL,
    PRIMARY KEY (email, contact_info_ID),
    CONSTRAINT fk_email_contact_info FOREIGN KEY (contact_info_ID)
        REFERENCES Contact_Info(contact_info_ID)
);

CREATE TABLE Phone (
    phone_number VARCHAR2(20) NOT NULL,
    contact_info_ID INT NOT NULL,
    PRIMARY KEY (phone_number, contact_info_ID),
    CONSTRAINT fk_phone_contact_info FOREIGN KEY (contact_info_ID)
        REFERENCES Contact_Info(contact_info_ID)
);

CREATE TABLE Address (
    zip VARCHAR2(10) NOT NULL,
    contact_info_ID INT NOT NULL,
    apartment_number VARCHAR2(10),
    city VARCHAR2(50) NOT NULL,
    building_number VARCHAR2(10),
    street VARCHAR2(50) NOT NULL,
    PRIMARY KEY (zip, contact_info_ID),
    CONSTRAINT fk_address_contact_info FOREIGN KEY (contact_info_ID)
        REFERENCES Contact_Info(contact_info_ID)
);

CREATE TABLE Student (
    student_ID INT PRIMARY KEY,
    grade INT NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    CONSTRAINT check_grade_range CHECK (grade >= 1 AND grade <= 6)
);

CREATE TABLE Student_Contacts (
    student_ID INT NOT NULL,
    contact_info_ID INT NOT NULL,
    CONSTRAINT pk_student_contacts PRIMARY KEY (student_ID, contact_info_ID),
    CONSTRAINT fk_student_contacts_student FOREIGN KEY (student_ID)
        REFERENCES Student(student_ID),
    CONSTRAINT fk_student_contacts_contact_info FOREIGN KEY (contact_info_ID)
        REFERENCES Contact_Info(contact_info_ID)
);
CREATE TABLE Event (
    event_ID INT PRIMARY KEY,
    event_date DATE NOT NULL,
    event_time VARCHAR2(5),
    description VARCHAR2(255),
    CONSTRAINT check_time_format CHECK (REGEXP_LIKE(event_time, '^(2[0-3]|[01][0-9]):[0-5][0-9]$'))
);

CREATE TABLE Organize (
    teacher_ID INT,
    event_ID INT,
    PRIMARY KEY (teacher_ID, event_ID),
    CONSTRAINT fk_organize_teacher FOREIGN KEY (teacher_ID)
        REFERENCES Teacher(teacher_ID),
    CONSTRAINT fk_organize_event FOREIGN KEY (event_ID)
        REFERENCES Event(event_ID)
);

CREATE TABLE Location (
    location_ID INT PRIMARY KEY,
    event_ID INT,
    Hall_number INT NOT NULL,
    CONSTRAINT fk_location_event FOREIGN KEY (event_ID)
        REFERENCES Event(event_ID)
);

CREATE OR REPLACE TRIGGER trg_limit_contacts
BEFORE INSERT ON Student_Contacts
FOR EACH ROW
DECLARE
    contact_count INT;
BEGIN
    SELECT COUNT(*) INTO contact_count FROM Student_Contacts
    WHERE student_ID = :NEW.student_ID;

    IF contact_count >= 2 THEN
        RAISE_APPLICATION_ERROR(-20002, 'A student can have at most two contact information IDs.');
    END IF;
END;




